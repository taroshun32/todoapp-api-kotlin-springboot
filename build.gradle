buildscript {
  ext {
    kotlinVersion = "1.3.72"
    springBootVersion = "2.2.6.RELEASE"
    springBootDomaVersion = "1.1.1"
    domaVersion = "2.19.3"
    mysqlJdbcVersion = "8.0.14"
    flywayVersion = "5.2.3"
    detektVersion = "1.3.0"
    assertJVersion = "3.12.2"
    dbunitVersion = "2.6.0"
    dbunitSpringVersion = "1.3.0"
    mockkVersion = "1.9"
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    classpath("mysql:mysql-connector-java:${mysqlJdbcVersion}")
  }
}

plugins {
  id "org.flywaydb.flyway" version "5.2.3"
  id "io.gitlab.arturbosch.detekt" version "1.3.0"
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "kotlin-kapt"

apply from: 'datasource.gradle'

group = "com.example"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = JavaVersion.VERSION_11

kapt {
  arguments {
    arg("doma.resources.dir", compileKotlin.destinationDir)
  }
}

task copyDomaResources(type: Sync) {
  from sourceSets.main.resources.srcDirs
  into compileKotlin.destinationDir
  include "doma.compile.config"
  include "META-INF/**/*.sql"
  include "META-INF/**/*.script"
}

compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "11"
  }
  dependsOn copyDomaResources
}

compileTestKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "11"
  }
}

dependencies {
  implementation project(":todoapp-openapi")

  /* kotlin */
  implementation("org.jetbrains.kotlin:kotlin-reflect")
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core")
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")

  /* spring */
  runtimeOnly("org.springframework.boot:spring-boot-devtools")
  implementation("org.springframework.boot:spring-boot-starter-aop")

  /* Detekt - Static Code Analysis */
  detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:${detektVersion}")

  /* Doma2 */
  implementation "org.seasar.doma.boot:doma-spring-boot-starter:$springBootDomaVersion"
  implementation "org.seasar.doma:doma:${domaVersion}"
  kapt("org.seasar.doma:doma:${domaVersion}")

  /* flyway */
  implementation("org.flywaydb:flyway-core:$flywayVersion")

  /* mysql */
  runtimeOnly("mysql:mysql-connector-java")

  /* ULID */
  implementation("de.huxhorn.sulky:de.huxhorn.sulky.ulid:8.2.0")

  /* Semantic Version */
  implementation("net.swiftzer.semver:semver:1.1.1")

  /* test */
  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: "org.junit.vintage", module: "junit-vintage-engine"
  }
  testImplementation("org.assertj:assertj-core:${assertJVersion}")
  testImplementation("org.dbunit:dbunit:${dbunitVersion}")
  testCompile("com.github.springtestdbunit:spring-test-dbunit:${dbunitSpringVersion}")

  /* mock */
  testImplementation("io.mockk:mockk:${mockkVersion}")
  testImplementation("io.mockk:mockk-common:${mockkVersion}")
}

allprojects {
  apply plugin: "kotlin"
  apply plugin: "kotlin-spring"
  apply plugin: "io.spring.dependency-management"
  apply plugin: "kotlin-kapt"

  repositories {
    mavenCentral()
    jcenter()
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
  }

  dependencies {
    /* kotlin */
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    /* spring */
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
  }
}

/* Detekt Task */
detekt {
  input = files("src/main/kotlin")
  config = files("detekt-config.yml")
  autoCorrect = true
  parallel = true
}

tasks.withType(io.gitlab.arturbosch.detekt.Detekt) {
  exclude(".*/resources/.*")
  exclude(".*/build/.*")
}

/* enable junit 5 */
test {
  useJUnitPlatform()
}

/* remote debug */
bootRun {
  jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"]
}

/* flyway settings */
flyway {
  url = datasource.url
  user = datasource.user
  password = datasource.password
  locations = ['filesystem:src/main/resources/db/createTable', 'filesystem:src/main/resources/db/insertData']
}

/* flyway task */
flywayMigrate
